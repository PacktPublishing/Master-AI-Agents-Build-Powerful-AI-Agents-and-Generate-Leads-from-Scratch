{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Input data\
const items = $input.first().json.items;\
\
// Output array to hold the rows\
const outputRows = [];\
\
// Function to clean HTML tags and decode HTML entities from the snippet\
function cleanHTML(html) \{\
  // Remove HTML tags using a regular expression\
  let cleaned = html.replace(/<[^>]*>/g, '');  // Strip HTML tags\
  \
  // Decode HTML entities (like &nbsp;, &amp;)\
  cleaned = cleaned.replace(/&nbsp;/g, ' ')   // Non-breaking spaces\
                    .replace(/&#39;/g, "'")  // Apostrophe\
                    .replace(/&amp;/g, '&')  // Ampersand\
                    .replace(/&lt;/g, '<')   // Less than symbol\
                    .replace(/&gt;/g, '>');  // Greater than symbol\
\
  return cleaned;\
\}\
\
// Function to extract name from URL (handling both hyphenated and non-hyphenated cases)\
function extractNameFromUrl(url) \{\
  const match = url.match(/(?:\\/in\\/)([^\\/?&]+)/); // Extract name after /in/ in the URL\
  if (match && match[1]) \{\
    // Remove any numeric IDs from the end of the string if present\
    const nameWithIdRemoved = match[1].replace(/-\\w+$/, ''); // Remove alphanumeric IDs from the name\
    // Replace hyphens with spaces and capitalize the words\
    return nameWithIdRemoved.replace(/-/g, ' ').replace(/\\b\\w/g, char => char.toUpperCase());\
  \}\
  return 'Unknown'; // Fallback if no match is found\
\}\
\
// Iterate over each item and create separate rows for each\
items.forEach(item => \{\
  // Extract name from the formatted URL\
  const name = item.formattedUrl ? extractNameFromUrl(item.formattedUrl) : 'Unknown';\
\
  // Cleaning the snippet by removing unwanted HTML tags and decoding entities\
  const cleanSnippet = item.htmlSnippet ? cleanHTML(item.htmlSnippet) : '';\
\
  // Constructing the row\
  const row = \{\
    name: name,  // Derived name without ID part\
    url: item.formattedUrl || item.htmlFormattedUrl || '', // Use formattedUrl or htmlFormattedUrl for the URL\
    snippet: cleanSnippet // Cleaned text snippet\
  \};\
\
  // Push the row to the output array\
  outputRows.push(\{ json: row \});\
\});\
\
// Return all rows separately\
return outputRows;\
}